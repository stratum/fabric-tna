// Copyright 2021-present Open Networking Foundation
// SPDX-License-Identifier: LicenseRef-ONF-Member-Only-1.0

// To validate: ./jflint.sh Jenkinsfile

// sha1 used for PRs, while commitHash is populated for postmerge
commitHash = params.commitHash ? params.commitHash : params.sha1
// Profile and Platform will be set through Jenkins'job parameters.
PROFILE = params.profile ? params.profile : "fabric"
ARCHITECTURE = params.architecture ? params.architecture : "tna"
//EnvFile will be populated by reading .env file
EnvFile = ""
GITHUB_URL = "git@github.com:stratum/fabric-tna.git"

pipeline {
    agent { label "${params.buildNode}" }
    stages {
        stage("Prepare environment") {
            steps {
                step([$class: "WsCleanup"])
                gitCheckout(GITHUB_URL, commitHash)
                dockerLogins()
                //Set JDK 11
                sh "sudo update-java-alternatives -s java-11-amazon-corretto"

                script {
                    dir ("${env.WORKSPACE}/fabric-tna") {
                        EnvFile = sh(
                                script: 'make env',
                                returnStdout: true
                        ).trim().split("\n")
                    }
                }
            }
        }
        stage("Build dependencies") {
            steps {
                dir ("${env.WORKSPACE}/fabric-tna") {
                    withEnv(EnvFile as List) {
                        sh '''
                            make deps
                            DOCKER_BUILDKIT=1 docker build -f ptf/Dockerfile\
                            --build-arg=BUILDKIT_INLINE_CACHE=1\
                            --cache-from "${TESTER_DOCKER_IMG}" -t "${TESTER_DOCKER_IMG}" .
                        '''
                    }
                }
            }
        }
        stage("Build P4") {
            steps {
                dir ("${env.WORKSPACE}/fabric-tna") {
                    // Making selected profile
                    sh "make -j8 ${PROFILE}"
                }
            }
        }
        stage("Make constants and pipeconf tests") {
            when {
                expression {
                    return PROFILE == "fabric-spgw-int"
                }
            }
            steps {
                dir ("${env.WORKSPACE}/fabric-tna") {
                    sh "make constants pipeconf-ci MVN_FLAGS=\"-B -Pci-verify -Pcoverage\""
                    sh "bash .jenkins/codecov.sh"
                }
                checkP4InfoConstants()
            }
        }
        stage("Run PTF") {
            steps {
                echo "Running profile ${PROFILE} for architecture ${ARCHITECTURE}"
                runPTFTest(ARCHITECTURE, PROFILE)
            }
            post {
                always {
                    exportPTFArtifacts(ARCHITECTURE, PROFILE)
                }
            }
        }
        stage("Docker push image") {
            steps {
                script {
                    if (!params.ghprbPullId?.trim()) {
                        // Post Merge.
                        dir("${env.WORKSPACE}/fabric-tna") {
                            withEnv(EnvFile as List) {
                                sh 'docker push "${TESTER_DOCKER_IMG}"'
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                if (!params.ghprbPullId?.trim()) {
                    // Post Merge
                    setBuildStatus("Build succeeded", "SUCCESS", GITHUB_URL)
                }
            }
        }
        failure {
            alert()
        }
    }
}

void gitCheckout(String url, String commitHash) {
  checkout([
          $class           : "GitSCM",
          userRemoteConfigs: [[url          : url,
                               refspec      : "+refs/heads/*:refs/remotes/origin/* +refs/pull/*:refs/remotes/origin/pr/*",
                               credentialsId: "github-onf-bot-ssh-key",]],
          branches         : [[name: commitHash]],
          extensions       : [
                  [$class: "RelativeTargetDirectory", relativeTargetDir: "fabric-tna"],
                  [$class: "SubmoduleOption", recursiveSubmodules: true, parentCredentials: true]]
  ],)
}

void dockerLogins() {
    dir ("${env.WORKSPACE}/fabric-tna") {
        sh "docker login registry.opennetworking.org -u $ONF_REGISTRY_USERNAME -p $ONF_REGISTRY_PASSWORD"
        sh "docker login registry.aetherproject.org -u $AETHER_REGISTRY_USERNAME -p $AETHER_REGISTRY_PASSWORD"
        sh "docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD"
    }
}

void checkP4InfoConstants() {
    // Since the Java build is based on auto-generated P4InfoConstants.java
    // (using `make constants`) check that checked-in file is up-to-date:
    dir ("${env.WORKSPACE}/fabric-tna") {
        String modified=sh(
                script: 'git status --porcelain',
                returnStdout: true
        ).trim()

        if ( modified.length() > 0 ) {
            echo "The following build artifacts do not correspond to the expected ones,"
            echo "please run the build locally before pushing a new change:"
            echo "$modified"
            exit 1
        }
    }
}

void runPTFTest(String architecture, String profile) {
    if (architecture.toLowerCase() == "tna") {
        runTmPTFTests(profile)
    } else { // bmv2
        runBmv2PTFTests(profile)
    }
}

void runTmPTFTests(String profile) {
    dir ("${env.WORKSPACE}/fabric-tna") {
        echo "Run PTF tests for profile ${profile}"
        sh "./ptf/run/tm/run \"${profile}\""

        echo "Verify TV generation for profile ${profile}"
        sh "./ptf/run/tv/run \"${profile}\""

        if (profile.toLowerCase().contains("int")) {
            // int-dod is failing because of missing 'watchlist' table that
            //  gets truncated by p4c being unused, if profile does not contain 'int'.

            // Special case to test INT drop report with deflected packet.
            sh "TM_DOD=1 ./ptf/run/tm/run \"${profile}\" TEST=int-dod"
            sh "TM_DOD=1 ./ptf/run/tv/run \"${profile}\" TEST=int-dod"
        }
    }
}

void runBmv2PTFTests(String profile) {
    dir ("${env.WORKSPACE}/fabric-tna") {
        echo "Run PTF tests for bmv2, profile ${profile}"
        sh "./ptf/run/bmv2/run \"${profile}\""
    }
}

void exportPTFArtifacts(String architecture, String profile) {
    dir ("${env.WORKSPACE}/fabric-tna") {
        // Export logs
        String target = "tm"
        if (architecture.toLowerCase() == "v1model") {
            target = "bmv2"
        }

        sh """
            rm -rf \"logs/${target}/${profile}\"
            mkdir -p \"logs/${target}/${profile}\"
            mv ptf/run/${target}/log \"logs/${target}/${profile}\"
            mv ptf/tests/common/ptf.log \"logs/${target}/${profile}/\"
            mv ptf/tests/common/ptf.pcap \"logs/${target}/${profile}/\"
        """

        // Compress the logs in a single tar ball
        sh "tar -czvf logs.tar.gz logs/"
        archiveArtifacts artifacts: "logs.tar.gz", fingerprint: true
    }
}

void alert() {
    if (!params.ghprbPullId?.trim()) {
        // Post-merge, alert project maintainers
        echo "build status failed. alerting maintainers"
        setBuildStatus("Build failed", "FAILURE", "${env.GITHUB_URL}")
        emailext(
                subject: "[${env.JOB_NAME}] ${currentBuild.currentResult}: ${params.sha1}",
                body: "Check results at ${env.BUILD_URL}",
                to: "carmelo@opennetworking.org"
        )
    } else {
        // Pull request, alert author
        emailext(
                subject: "[${env.JOB_NAME}] ${currentBuild.currentResult}: pull request #${params.ghprbPullId}",
                body: "Check results at ${env.BUILD_URL}\n\nTriggered by GitHub pull request at ${params.ghprbPullLink}",
                to: "${params.ghprbPullAuthorEmail}"
        )
    }
}

void setBuildStatus(String message, String state, String url) {
    echo "Setting build status to success"
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: url],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "${env.JOB_NAME}"],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}
